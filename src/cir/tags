!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUF_SIZE	reader.h	17;"	d
CIRMGR_H	cirMgr.h	3;"	d
CIRNET_H	cirNet.h	3;"	d
CIR_GATE_H	cirGate.h	4;"	d
COMMON	cirMgr.h	/^    COMMON,$/;"	e	enum:VAR_GROUP
CUT_CAND	cirMgr.h	17;"	d
CUT_SIZE	cirCost.cpp	7;"	d	file:
CirAndGate	cirGate.h	/^CirGateType(CirAndGate);$/;"	v
CirBufGate	cirGate.h	/^CirGateType(CirBufGate);$/;"	v
CirConstGate	cirGate.h	/^CirGateType(CirConstGate);$/;"	v
CirErrorGate	cirGate.h	/^CirGateType(CirErrorGate);$/;"	v
CirGate	cirGate.h	/^    CirGate(const string& name = "", unsigned id = 0): $/;"	f	class:CirGate
CirGate	cirGate.h	/^class CirGate$/;"	c
CirGateType	cirGate.h	155;"	d
CirGateV	cirGate.h	/^    explicit CirGateV(CirGate* g = 0, bool inv = false): _gateV(reinterpret_cast<size_t>(g)) {$/;"	f	class:CirGateV
CirGateV	cirGate.h	/^class CirGateV$/;"	c
CirInvGate	cirGate.h	/^CirGateType(CirInvGate);$/;"	v
CirMgr	cirMgr.h	/^    explicit CirMgr(const string& name = ""): $/;"	f	class:CirMgr
CirMgr	cirMgr.h	/^class CirMgr$/;"	c
CirMuxGate	cirGate.h	/^CirGateType(CirMuxGate);$/;"	v
CirNandGate	cirGate.h	/^CirGateType(CirNandGate);$/;"	v
CirNet	cirNet.h	/^	explicit CirNet(const string& name = "", unsigned id = 0): $/;"	f	class:CirNet
CirNet	cirNet.h	/^class CirNet$/;"	c
CirNorGate	cirGate.h	/^CirGateType(CirNorGate);$/;"	v
CirOrGate	cirGate.h	/^CirGateType(CirOrGate);$/;"	v
CirPiGate	cirGate.h	/^CirGateType(CirPiGate);$/;"	v
CirPoGate	cirGate.h	/^CirGateType(CirPoGate);$/;"	v
CirXnorGate	cirGate.h	/^CirGateType(CirXnorGate);$/;"	v
CirXorGate	cirGate.h	/^CirGateType(CirXorGate);$/;"	v
Current_Pos	reader.h	/^	unsigned int Current_Pos()	{ return overall_pos; }$/;"	f	class:Reader
EDGE_BIT	cirGate.h	/^    static const size_t EDGE_BIT = 2;$/;"	m	class:CirGateV
GateList	cirGate.h	/^typedef vector<CirGate*> GateList;$/;"	t
GateType	cirGate.h	/^enum GateType$/;"	g
GateVList	cirGate.h	/^typedef vector<CirGateV> GateVList;$/;"	t
Gate_And	cirGate.h	/^    Gate_And,$/;"	e	enum:GateType
Gate_Buf	cirGate.h	/^    Gate_Buf,$/;"	e	enum:GateType
Gate_Const	cirGate.h	/^    Gate_Const,$/;"	e	enum:GateType
Gate_Error	cirGate.h	/^    Gate_Error,$/;"	e	enum:GateType
Gate_Inv	cirGate.h	/^    Gate_Inv,$/;"	e	enum:GateType
Gate_Mux	cirGate.h	/^    Gate_Mux,$/;"	e	enum:GateType
Gate_Nand	cirGate.h	/^    Gate_Nand,$/;"	e	enum:GateType
Gate_Nor	cirGate.h	/^    Gate_Nor,$/;"	e	enum:GateType
Gate_Or	cirGate.h	/^    Gate_Or,$/;"	e	enum:GateType
Gate_Pi	cirGate.h	/^    Gate_Pi,$/;"	e	enum:GateType
Gate_Po	cirGate.h	/^    Gate_Po,$/;"	e	enum:GateType
Gate_UNDEF	cirGate.h	/^    Gate_UNDEF$/;"	e	enum:GateType
Gate_Xnor	cirGate.h	/^    Gate_Xnor,$/;"	e	enum:GateType
Gate_Xor	cirGate.h	/^    Gate_Xor,$/;"	e	enum:GateType
INV_MASK	cirGate.h	/^    static const size_t INV_MASK = 0x1;$/;"	m	class:CirGateV
LOCAL_OFF	cirMgr.h	/^    LOCAL_OFF,$/;"	e	enum:VAR_GROUP
LOCAL_ON	cirMgr.h	/^    LOCAL_ON,$/;"	e	enum:VAR_GROUP
NONE	cirMgr.h	/^    NONE$/;"	e	enum:VAR_GROUP
PTR_MASK	cirGate.h	/^    static const size_t PTR_MASK = (~(size_t(0)) >> EDGE_BIT) << EDGE_BIT;$/;"	m	class:CirGateV
RDR_EOF	reader.h	18;"	d
Reader	reader.h	/^	Reader():fd(-1)				{};$/;"	f	class:Reader
Reader	reader.h	/^class Reader{$/;"	c
SATGeneralization	cirSat.cpp	/^CirMgr::SATGeneralization(idxVec& generalizedCut)$/;"	f	class:CirMgr
UNSATGeneralizationWithUNSATCore	cirSat.cpp	/^CirMgr::UNSATGeneralizationWithUNSATCore(idxVec& cutIdx, std::vector<Lit>& Lit_vec_origin, idxVec& generalizedCut)$/;"	f	class:CirMgr
VAR_GROUP	cirMgr.h	/^enum VAR_GROUP$/;"	g
VarMap	cirMgr.h	/^typedef std::unordered_map<Var, CirGate*> VarMap;$/;"	t
_F	cirMgr.h	/^	CirNet*								_F;$/;"	m	class:CirMgr
_G	cirMgr.h	/^	CirNet*								_G;$/;"	m	class:CirMgr
_READER_H_	reader.h	10;"	d
_allExplored	cirMgr.h	/^    bool                                _allExplored;$/;"	m	class:CirMgr
_bestCut	cirMgr.h	/^    idxVec                              _bestCut;$/;"	m	class:CirMgr
_blockingClauses	cirMgr.h	/^    std::vector<std::vector<bool> >		_blockingClauses;$/;"	m	class:CirMgr
_candNameList	cirMgr.h	/^	vector<string>						_candNameList;$/;"	m	class:CirMgr
_candSolver	cirMgr.h	/^    SatSolverV*                         _candSolver;   \/\/ for gen valid cut$/;"	m	class:CirMgr
_candVar	cirGate.h	/^    Var                     _candVar;$/;"	m	class:CirGate
_const0	cirNet.h	/^	CirGate*							_const0;$/;"	m	class:CirNet
_const1	cirNet.h	/^	CirGate*							_const1;$/;"	m	class:CirNet
_costSolver	cirMgr.h	/^	SatSolverV*							_costSolver;   \/\/ for finding random cut$/;"	m	class:CirMgr
_costVar	cirGate.h	/^    Var                     _costVar;$/;"	m	class:CirGate
_costVar2Gate	cirMgr.h	/^	VarMap	                            _costVar2Gate;$/;"	m	class:CirMgr
_debug	cirMgr.h	/^    bool     _debug; \/\/ will cause problem in CIC machine$/;"	m	class:CirMgr
_dupF	cirMgr.h	/^	CirNet*								_dupF;$/;"	m	class:CirMgr
_dupG	cirMgr.h	/^	CirNet*								_dupG;$/;"	m	class:CirMgr
_errorList	cirNet.h	/^	GateList							_errorList;$/;"	m	class:CirNet
_gateList	cirNet.h	/^	GateList							_gateList;			$/;"	m	class:CirNet
_gateV	cirGate.h	/^    size_t _gateV;$/;"	m	class:CirGateV
_globalRef	cirGate.cpp	/^unsigned CirGate::_globalRef = 0;$/;"	m	class:CirGate	file:
_globalRef	cirGate.h	/^    static unsigned         _globalRef;$/;"	m	class:CirGate
_id	cirGate.h	/^    unsigned                _id;$/;"	m	class:CirGate
_id	cirNet.h	/^	unsigned 							_id;$/;"	m	class:CirNet
_impVar	cirGate.h	/^    Var                     _impVar;$/;"	m	class:CirGate
_in	cirGate.h	/^    GateVList               _in;$/;"	m	class:CirGate
_isClauseOn	cirMgr.h	/^    vector<bool>						_isClauseOn;$/;"	m	class:CirMgr
_isClauseOnDup	cirMgr.h	/^    vector<bool>						_isClauseOnDup;$/;"	m	class:CirMgr
_muxAssignment	cirMgr.h	/^	vector<bool>						_muxAssignment;$/;"	m	class:CirMgr
_name	cirGate.h	/^    string                  _name;$/;"	m	class:CirGate
_name	cirMgr.h	/^	string 								_name;$/;"	m	class:CirMgr
_name	cirNet.h	/^	string								_name;$/;"	m	class:CirNet
_name2GateMap	cirNet.h	/^	name2GateMap					    _name2GateMap;	$/;"	m	class:CirNet
_out	cirGate.h	/^    GateVList               _out;$/;"	m	class:CirGate
_out	cirMgr.h	/^    CirNet*                             _out;$/;"	m	class:CirMgr
_patch	cirMgr.h	/^	CirNet*								_patch;$/;"	m	class:CirMgr
_piList	cirNet.h	/^	GateList							_piList, _poList;$/;"	m	class:CirNet
_poList	cirNet.h	/^	GateList							_piList, _poList;$/;"	m	class:CirNet
_rcset	cirMgr.h	/^    std::vector<CirNet*>                _rcset;$/;"	m	class:CirMgr
_ref	cirGate.h	/^    mutable unsigned        _ref;$/;"	m	class:CirGate
_rmOnset	cirMgr.h	/^    rmOnset                             _rmOnset;$/;"	m	class:CirMgr
_rmOnsetDup	cirMgr.h	/^    rmOnset                             _rmOnsetDup;$/;"	m	class:CirMgr
_rmOut	cirMgr.h	/^    std::vector<Var>                    _rmOut;$/;"	m	class:CirMgr
_rmSolver	cirMgr.h	/^    SatSolverV*                         _rmSolver;     \/\/ for cofactor reduction$/;"	m	class:CirMgr
_rmVar	cirGate.h	/^    Var                     _rmVar; \/\/ for solving new rv assignment$/;"	m	class:CirGate
_rvset	cirMgr.h	/^    std::vector< vector<bool> >         _rvset;$/;"	m	class:CirMgr
_s	cirMgr.h	/^	SatSolverV*							_s;            \/\/ for gen patch$/;"	m	class:CirMgr
_simV	cirGate.h	/^    size_t                  _simV;$/;"	m	class:CirGate
_sortedCandGate	cirMgr.h	/^	vector<CirGate*>					_sortedCandGate;$/;"	m	class:CirMgr
_topoList	cirNet.h	/^	mutable GateList					_topoList;$/;"	m	class:CirNet
_totGateList	cirNet.h	/^    mutable GateList                    _totGateList;$/;"	m	class:CirNet
_var	cirGate.h	/^    Var                     _var;$/;"	m	class:CirGate
_var2Gate	cirMgr.h	/^    VarMap                              _var2Gate;$/;"	m	class:CirMgr
_varGroup	cirMgr.h	/^    vector<VAR_GROUP>                   _varGroup;$/;"	m	class:CirMgr
_varsDup	cirMgr.h	/^    std::vector<Var>					_varsDup;$/;"	m	class:CirMgr
_weight	cirGate.h	/^    unsigned                _weight;$/;"	m	class:CirGate
addAllBlockings	cirCost.cpp	/^CirMgr::addAllBlockings()$/;"	f	class:CirMgr
addAllToCandSolver	cirSat.cpp	/^CirMgr::addAllToCandSolver()$/;"	f	class:CirMgr
addBlockingCut	cirCost.cpp	/^CirMgr::addBlockingCut(idxVec& cutIdx, bool isSat)$/;"	f	class:CirMgr
addCandIdx	cirSim.cpp	/^CirMgr::addCandIdx(idxVec& candIdx, unsigned startIdx, unsigned numToAdd)$/;"	f	class:CirMgr
addConstConstraint	cirSat.cpp	/^CirMgr::addConstConstraint(CirNet* n, int solver)$/;"	f	class:CirMgr
addCostConstraint	cirCost.cpp	/^CirMgr::addCostConstraint(unsigned cost)$/;"	f	class:CirMgr
addErrorConstraint	cirSat.cpp	/^CirMgr::addErrorConstraint(CirNet* n, bool val, int solver)$/;"	f	class:CirMgr
addToSolver	cirGate.cpp	/^CirAndGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirAndGate
addToSolver	cirGate.cpp	/^CirBufGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirBufGate
addToSolver	cirGate.cpp	/^CirConstGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirConstGate
addToSolver	cirGate.cpp	/^CirErrorGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirErrorGate
addToSolver	cirGate.cpp	/^CirInvGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirInvGate
addToSolver	cirGate.cpp	/^CirMuxGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirMuxGate
addToSolver	cirGate.cpp	/^CirNandGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirNandGate
addToSolver	cirGate.cpp	/^CirNorGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirNorGate
addToSolver	cirGate.cpp	/^CirOrGate::addToSolver(SatSolverV* s,int solver) const$/;"	f	class:CirOrGate
addToSolver	cirGate.cpp	/^CirPiGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirPiGate
addToSolver	cirGate.cpp	/^CirPoGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirPoGate
addToSolver	cirGate.cpp	/^CirXnorGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirXnorGate
addToSolver	cirGate.cpp	/^CirXorGate::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirXorGate
addToSolver	cirMgr.h	/^    void addToSolver(CirNet* n) const { n -> addToSolver(_s); }$/;"	f	class:CirMgr
addToSolver	cirSat.cpp	/^CirNet::addToSolver(SatSolverV* s, int solver) const$/;"	f	class:CirNet
addWeight	cirParse.cpp	/^CirMgr::addWeight(const string& fileName)$/;"	f	class:CirMgr
addXorConstraint	cirSat.cpp	/^CirMgr::addXorConstraint(CirNet* f, CirNet* g, int solver)$/;"	f	class:CirMgr
analyzeVec	cirSim.cpp	/^CirMgr::analyzeVec(assignmentVec& t_1, assignmentVec& t_0, idxVec& candIdx)$/;"	f	class:CirMgr
assignmentVec	cirMgr.h	/^typedef std::vector<size_t> assignmentVec;$/;"	t
assumeCut	cirSat.cpp	/^CirMgr::assumeCut(idxVec& cutIdx, std::vector<Lit>& Lit_vec_origin)$/;"	f	class:CirMgr
assumeCut	cirSat.cpp	/^CirMgr::assumeCut(vector<Lit>& Lit_vec_origin)$/;"	f	class:CirMgr
buf	reader.h	/^	unsigned char* 	buf;$/;"	m	class:Reader
buildItp	cirSat.cpp	/^CirMgr::buildItp(const string& fileName)$/;"	f	class:CirMgr
buildTopoList	cirNet.cpp	/^CirNet::buildTopoList() const$/;"	f	class:CirNet
buildTopoListRec	cirNet.cpp	/^CirNet::buildTopoListRec(CirGate* g) const$/;"	f	class:CirNet
buildVarMap	cirSat.cpp	/^CirMgr::buildVarMap(CirGate* g ) {$/;"	f	class:CirMgr
buildVarMap	cirSat.cpp	/^CirMgr::buildVarMap(CirNet* ntk) {$/;"	f	class:CirMgr
checkPo	cirProof.cpp	/^CirMgr::checkPo()$/;"	f	class:CirMgr
checkValidCut	cirSim.cpp	/^CirMgr::checkValidCut(assignmentVec& t_1, assignmentVec& t_0)$/;"	f	class:CirMgr
checkValidPatch	cirProof.cpp	/^CirMgr::checkValidPatch()$/;"	f	class:CirMgr
clearFanout	cirGate.h	/^    void clearFanout()                                  { _out.clear(); }$/;"	f	class:CirGate
close	reader.cpp	/^void Reader::close(){$/;"	f	class:Reader
connect	cirParse.cpp	/^CirNet::connect(const vector<string>& tokens, const GateType& t)$/;"	f	class:CirNet
connectXor	cirDup.cpp	/^CirMgr::connectXor(CirNet* f, CirNet* g)$/;"	f	class:CirMgr
createConst	cirNet.cpp	/^CirNet::createConst(bool val)$/;"	f	class:CirNet
createGate	cirNet.cpp	/^CirNet::createGate(const GateType& t, const string& name, unsigned id)$/;"	f	class:CirNet
createGateRec	cirParse.cpp	/^CirNet::createGateRec(const vector<string>& tokens, const GateType& t, unsigned i)$/;"	f	class:CirNet
createMux	cirNet.cpp	/^CirNet::createMux(CirGate* g_F, CirGate* g_dupF)$/;"	f	class:CirNet
createMux4Candidates	cirMgr.cpp	/^CirMgr::createMux4Candidates()$/;"	f	class:CirMgr
createVar	cirMgr.h	/^    void createVar(CirNet* n) const { n -> createVar(_s); }$/;"	f	class:CirMgr
createVar	cirSat.cpp	/^CirNet::createVar(SatSolverV* s, int solver) const$/;"	f	class:CirNet
createVar4CostSolver	cirCost.cpp	/^CirMgr::createVar4CostSolver()$/;"	f	class:CirMgr
createVarAll	cirSat.cpp	/^CirMgr::createVarAll() const$/;"	f	class:CirMgr
cutTest	cirCost.cpp	/^CirMgr::cutTest(idxVec& cutIdx)$/;"	f	class:CirMgr
dfsFromGate	cirNet.cpp	/^CirNet::dfsFromGate(CirGate* g) const$/;"	f	class:CirNet
dfsFromGateRec	cirNet.cpp	/^CirNet::dfsFromGateRec(CirGate* g, GateList& list, std::unordered_set<std::string>& nameHash) const$/;"	f	class:CirNet
dupNet	cirDup.cpp	/^CirMgr::dupNet(CirNet* n) const$/;"	f	class:CirMgr
eof	reader.cpp	/^bool Reader::eof() {$/;"	f	class:Reader
eraseFanout	cirGate.h	/^    void eraseFanout(unsigned idx)                  { _out.erase(_out.begin() + idx); }$/;"	f	class:CirGate
fd	reader.h	/^	int 			fd;$/;"	m	class:Reader
flipInv	cirGate.h	/^    void flipInv()              { _gateV ^= (size_t)INV_MASK; }$/;"	f	class:CirGateV
formulaRM	cirMulti.cpp	/^CirMgr::formulaRM(CirNet* f, CirNet* g, int solver) $/;"	f	class:CirMgr
genProofModel	cirProof.cpp	/^CirMgr::genProofModel(SatSolverV& solver)$/;"	f	class:CirMgr
generalizeCut	cirSim.cpp	/^CirMgr::generalizeCut(assignmentVec& t_1, assignmentVec& t_0, idxVec& candIdx, idxVec& cutIdx)$/;"	f	class:CirMgr
generatePatch	cirSat.cpp	/^CirMgr::generatePatch()$/;"	f	class:CirMgr
generatePatch	cirSat.cpp	/^CirMgr::generatePatch(idxVec& cutIdx)$/;"	f	class:CirMgr
get64	reader.cpp	/^unsigned long long Reader::get64(){$/;"	f	class:Reader
getCandVar	cirGate.h	/^    Var  getCandVar()                               { return _candVar; }$/;"	f	class:CirGate
getChar	reader.cpp	/^unsigned int Reader::getChar(){$/;"	f	class:Reader
getConst	cirNet.h	/^    CirGate* getConst(bool val) 					{ if(val) return _const1; else return _const0; }$/;"	f	class:CirNet
getCost	cirCost.cpp	/^CirMgr::getCost(idxVec& cutIdx)$/;"	f	class:CirMgr
getCostVar	cirGate.h	/^    Var  getCostVar()                               { return _costVar; }$/;"	f	class:CirGate
getCut	cirCost.cpp	/^CirMgr::getCut(idxVec& cutIdx, bool zeroFirst)$/;"	f	class:CirMgr
getCutWithDecisionOrdered	cirSat.cpp	/^CirMgr::getCutWithDecisionOrdered(bool zeroFirst, unsigned& bestCost)$/;"	f	class:CirMgr
getError	cirNet.h	/^	CirGate* getError(unsigned idx)					{ return _errorList[idx]; }$/;"	f	class:CirNet
getErrorNum	cirNet.h	/^	unsigned getErrorNum() const					{ return _errorList.size(); }$/;"	f	class:CirNet
getF	cirMgr.h	/^    CirNet* getF() 						{ return _F; }$/;"	f	class:CirMgr
getFanin	cirGate.h	/^    CirGate* getFanin(unsigned idx) const           { assert(idx < _in.size()); return _in[idx].getGate(); }$/;"	f	class:CirGate
getFaninCandVar	cirGate.h	/^    Var getFaninCandVar(unsigned idx) const         { assert(idx < _in.size()); return _in[idx].getGate() -> _candVar; }$/;"	f	class:CirGate
getFaninId	cirGate.h	/^    unsigned getFaninId(unsigned idx) const         { assert(idx < _in.size()); return _in[idx].getGate() -> _id; }$/;"	f	class:CirGate
getFaninRMVar	cirGate.h	/^    Var getFaninRMVar(unsigned idx) const           { assert(idx < _in.size()); return _in[idx].getGate() -> _rmVar; }$/;"	f	class:CirGate
getFaninSimV	cirGate.h	/^    size_t getFaninSimV(unsigned idx) const { assert(idx < _in.size()); return _in[idx].getGate() -> _simV; }$/;"	f	class:CirGate
getFaninSize	cirGate.h	/^    unsigned getFaninSize() const                       { return _in.size(); }$/;"	f	class:CirGate
getFaninV	cirGate.h	/^    CirGateV getFaninV(unsigned idx) const          { assert(idx < _in.size()); return _in[idx]; }$/;"	f	class:CirGate
getFaninVar	cirGate.h	/^    Var getFaninVar(unsigned idx) const             { assert(idx < _in.size()); return _in[idx].getGate() -> _var; }$/;"	f	class:CirGate
getFanout	cirGate.h	/^    CirGate* getFanout(unsigned idx) const          { assert(idx < _out.size()); return _out[idx].getGate(); }$/;"	f	class:CirGate
getFanoutSize	cirGate.h	/^    unsigned getFanoutSize() const                  { return _out.size(); }$/;"	f	class:CirGate
getFanoutV	cirGate.h	/^    CirGateV getFanoutV(unsigned idx) const         { assert(idx < _out.size()); return _out[idx]; }$/;"	f	class:CirGate
getG	cirMgr.h	/^    CirNet* getG() 						{ return _G; }$/;"	f	class:CirMgr
getGate	cirGate.h	/^    CirGate* getGate() const    { return (CirGate*)(_gateV & PTR_MASK); }$/;"	f	class:CirGateV
getGate	cirNet.h	/^    CirGate* getGate(unsigned id) 					{ return _gateList[id]; }$/;"	f	class:CirNet
getGateByName	cirNet.h	/^	CirGate* getGateByName(const string& n) 		{ return _name2GateMap[n]; }$/;"	f	class:CirNet
getGateNum	cirNet.h	/^    unsigned getGateNum() const						{ return _gateList.size(); }$/;"	f	class:CirNet
getId	cirGate.h	/^    unsigned getId()                    { return _id; }$/;"	f	class:CirGate
getImpVar	cirGate.h	/^    Var  getImpVar()                                { return _impVar; }$/;"	f	class:CirGate
getItp	cirSat.cpp	/^CirMgr::getItp()$/;"	f	class:CirMgr
getItp	cirSat.cpp	/^CirMgr::getItp(const string& name)$/;"	f	class:CirMgr
getName	cirGate.h	/^    const string& getName()         { return _name; }$/;"	f	class:CirGate
getName	cirNet.h	/^	const string& getName() const					{ return _name; }$/;"	f	class:CirNet
getNumClauses	cirMgr.h	/^    unsigned getNumClauses() const 	{ return _s -> getNumClauses(); }$/;"	f	class:CirMgr
getNumVars	cirMgr.h	/^    unsigned getNumVars() const		{ return _s -> nVars(); }$/;"	f	class:CirMgr
getPath	cirMgr.h	/^    CirNet* getPath() 					{ return _patch; }$/;"	f	class:CirMgr
getPi	cirNet.h	/^	CirGate* getPi(unsigned idx) 					{ return _piList[idx]; }$/;"	f	class:CirNet
getPiNum	cirNet.h	/^    unsigned getPiNum() const						{ return _piList.size(); }$/;"	f	class:CirNet
getPo	cirNet.h	/^	CirGate* getPo(unsigned idx) 					{ return _poList[idx]; }$/;"	f	class:CirNet
getPoNum	cirNet.h	/^    unsigned getPoNum() const						{ return _poList.size(); }$/;"	f	class:CirNet
getRMVar	cirGate.h	/^    Var  getRMVar()                                 { return _rmVar; }$/;"	f	class:CirGate
getSimV	cirGate.h	/^    size_t getSimV() { return _simV; }$/;"	f	class:CirGate
getTotalCost	cirCost.cpp	/^CirMgr::getTotalCost()$/;"	f	class:CirMgr
getType	cirGate.cpp	/^CirAndGate::getType() const$/;"	f	class:CirAndGate
getType	cirGate.cpp	/^CirBufGate::getType() const$/;"	f	class:CirBufGate
getType	cirGate.cpp	/^CirConstGate::getType() const$/;"	f	class:CirConstGate
getType	cirGate.cpp	/^CirErrorGate::getType() const$/;"	f	class:CirErrorGate
getType	cirGate.cpp	/^CirInvGate::getType() const$/;"	f	class:CirInvGate
getType	cirGate.cpp	/^CirMuxGate::getType() const$/;"	f	class:CirMuxGate
getType	cirGate.cpp	/^CirNandGate::getType() const$/;"	f	class:CirNandGate
getType	cirGate.cpp	/^CirNorGate::getType() const$/;"	f	class:CirNorGate
getType	cirGate.cpp	/^CirOrGate::getType() const$/;"	f	class:CirOrGate
getType	cirGate.cpp	/^CirPiGate::getType() const$/;"	f	class:CirPiGate
getType	cirGate.cpp	/^CirPoGate::getType() const$/;"	f	class:CirPoGate
getType	cirGate.cpp	/^CirXnorGate::getType() const$/;"	f	class:CirXnorGate
getType	cirGate.cpp	/^CirXorGate::getType() const$/;"	f	class:CirXorGate
getVar	cirGate.h	/^    Var  getVar()                                   { return _var; }$/;"	f	class:CirGate
getWeight	cirGate.h	/^    unsigned getWeight()                { return _weight; }$/;"	f	class:CirGate
idxVec	cirMgr.h	/^typedef std::vector<unsigned> idxVec;$/;"	t
incRef	cirGate.h	/^    static void incRef()            { ++_globalRef; }$/;"	f	class:CirGate
init	cirNet.cpp	/^CirNet::init()$/;"	f	class:CirNet
initCandSolver	cirSat.cpp	/^CirMgr::initCandSolver()$/;"	f	class:CirMgr
isFaninInv	cirGate.h	/^    bool isFaninInv(unsigned idx) const             { assert(idx < _in.size()); return _in[idx].isInv(); }$/;"	f	class:CirGate
isInv	cirGate.h	/^    bool isInv() const          { return (bool)(_gateV & (size_t)INV_MASK); }$/;"	f	class:CirGateV
isRef	cirGate.h	/^    bool isRef()                    { return _ref == _globalRef; }$/;"	f	class:CirGate
knownSim	cirNet.cpp	/^CirNet::knownSim()$/;"	f	class:CirNet
knownSim	cirSim.cpp	/^CirMgr::knownSim(CirNet* g, CirNet* f) const$/;"	f	class:CirMgr
markMultiOffsetClause	cirMulti.cpp	/^CirMgr::markMultiOffsetClause(const ClauseId& cid, const string& name)$/;"	f	class:CirMgr
markMultiOnsetClause	cirMulti.cpp	/^CirMgr::markMultiOnsetClause(const ClauseId& cid, const string& name)$/;"	f	class:CirMgr
markOffsetClause	cirSat.cpp	/^CirMgr::markOffsetClause(const ClauseId& cid)$/;"	f	class:CirMgr
markOnsetClause	cirSat.cpp	/^CirMgr::markOnsetClause(const ClauseId& cid)$/;"	f	class:CirMgr
miterNet	cirDup.cpp	/^CirMgr::miterNet(CirNet* src, CirNet* target)$/;"	f	class:CirMgr
name2GateMap	cirNet.h	/^typedef map<string, CirGate*> name2GateMap;$/;"	t
null	reader.h	/^	bool null()					{ return fd == -1; }$/;"	f	class:Reader
open	reader.cpp	/^void Reader::open( const char* file_name ){$/;"	f	class:Reader
open	reader.cpp	/^void Reader::open(int filedesc)$/;"	f	class:Reader
operator !=	cirGate.h	/^    bool operator != (CirGateV gateV) { return ((*this).getGate() != gateV.getGate()) || ((*this).isInv() != gateV.isInv()); }$/;"	f	class:CirGateV
operator ==	cirGate.h	/^    bool operator == (CirGateV gateV) { return ((*this).getGate() == gateV.getGate()) && ((*this).isInv() == gateV.isInv()); }$/;"	f	class:CirGateV
overall_pos	reader.h	/^	unsigned int	overall_pos;$/;"	m	class:Reader
parse	cirParse.cpp	/^bool CirNet::parse(const std::string& filename) {$/;"	f	class:CirNet
pos	reader.h	/^	unsigned int	pos;$/;"	m	class:Reader
proveEQ	cirSat.cpp	/^CirMgr::proveEQ(CirNet* f, CirNet* g)$/;"	f	class:CirMgr
pushBackFanin	cirGate.h	/^    void pushBackFanin(CirGateV gateV)              { _in.push_back(gateV); }$/;"	f	class:CirGate
pushBackFanout	cirGate.h	/^    void pushBackFanout(CirGateV gateV)             { _out.push_back(gateV); }$/;"	f	class:CirGate
pushBackPIList	cirNet.h	/^    void pushBackPIList(CirGate* g)                 { _piList.push_back(g); }$/;"	f	class:CirNet
pushBackPOList	cirNet.h	/^    void pushBackPOList(CirGate* g)                 { _poList.push_back(g); }$/;"	f	class:CirNet
randSim	cirMgr.h	/^    void randSim(CirNet* n) const { n -> randSim(); }$/;"	f	class:CirMgr
randSim	cirNet.cpp	/^CirNet::randSim()$/;"	f	class:CirNet
readVerilog	cirParse.cpp	/^CirMgr::readVerilog(const string& filename, bool isF)$/;"	f	class:CirMgr
removeCandFromFanoutCone	cirMgr.cpp	/^CirMgr::removeCandFromFanoutCone()$/;"	f	class:CirMgr
removeCandFromFanoutConeRec	cirMgr.cpp	/^CirMgr::removeCandFromFanoutConeRec(CirGate* g, std::unordered_set<std::string>& nameHash)$/;"	f	class:CirMgr
removeComment	cirParse.cpp	/^bool CirMgr::removeComment(const std::string& inFilename,$/;"	f	class:CirMgr
removeInvBuf	cirMgr.cpp	/^CirMgr::removeInvBuf()$/;"	f	class:CirMgr
removeInvBuf	cirNet.cpp	/^CirNet::removeInvBuf(std::vector<std::string>& nameList)$/;"	f	class:CirNet
report	cirGate.cpp	/^CirAndGate::report() const$/;"	f	class:CirAndGate
report	cirGate.cpp	/^CirBufGate::report() const$/;"	f	class:CirBufGate
report	cirGate.cpp	/^CirConstGate::report() const$/;"	f	class:CirConstGate
report	cirGate.cpp	/^CirErrorGate::report() const$/;"	f	class:CirErrorGate
report	cirGate.cpp	/^CirInvGate::report() const$/;"	f	class:CirInvGate
report	cirGate.cpp	/^CirMuxGate::report() const$/;"	f	class:CirMuxGate
report	cirGate.cpp	/^CirNandGate::report() const$/;"	f	class:CirNandGate
report	cirGate.cpp	/^CirNorGate::report() const$/;"	f	class:CirNorGate
report	cirGate.cpp	/^CirOrGate::report() const$/;"	f	class:CirOrGate
report	cirGate.cpp	/^CirPiGate::report() const$/;"	f	class:CirPiGate
report	cirGate.cpp	/^CirPoGate::report() const$/;"	f	class:CirPoGate
report	cirGate.cpp	/^CirXnorGate::report() const$/;"	f	class:CirXnorGate
report	cirGate.cpp	/^CirXorGate::report() const$/;"	f	class:CirXorGate
reportCandList	cirReport.cpp	/^CirMgr::reportCandList() const$/;"	f	class:CirMgr
reportFanoutCone	cirReport.cpp	/^CirMgr::reportFanoutCone(CirGate* g) const$/;"	f	class:CirMgr
reportFanoutConeRec	cirReport.cpp	/^CirMgr::reportFanoutConeRec(CirGate* g, unsigned level) const$/;"	f	class:CirMgr
reportGateAll	cirReport.cpp	/^CirNet::reportGateAll() const$/;"	f	class:CirNet
reportMuxAssignment	cirReport.cpp	/^CirMgr::reportMuxAssignment() const$/;"	f	class:CirMgr
reportNetList	cirReport.cpp	/^CirNet::reportNetList() const$/;"	f	class:CirNet
reportNetListRec	cirReport.cpp	/^CirNet::reportNetListRec(CirGate* g, unsigned level) const$/;"	f	class:CirNet
reportSimV	cirReport.cpp	/^CirNet::reportSimV() const$/;"	f	class:CirNet
reportSortedCand	cirReport.cpp	/^CirMgr::reportSortedCand() const$/;"	f	class:CirMgr
reportTopoList	cirReport.cpp	/^CirNet::reportTopoList() const$/;"	f	class:CirNet
reserveFaninSize	cirGate.h	/^    void reserveFaninSize(unsigned s)               { _in.reserve(s); }$/;"	f	class:CirGate
reserveFanoutSize	cirGate.h	/^    void reserveFanoutSize(unsigned s)              { _out.reserve(s); }$/;"	f	class:CirGate
restoreTiedGates	cirCost.cpp	/^CirMgr::restoreTiedGates()$/;"	f	class:CirMgr
retrieveProof	cirSat.cpp	/^CirMgr::retrieveProof( Reader& rdr, vector<unsigned>& clausePos, vector<ClauseId>& usedClause )$/;"	f	class:CirMgr
rmOnset	cirMgr.h	/^typedef std::unordered_map<string, vector<bool> > rmOnset;$/;"	t
seek	reader.cpp	/^void Reader::seek( const unsigned int to ){$/;"	f	class:Reader
setCandVar	cirGate.h	/^    void setCandVar(Var v)                          { _candVar = v; }$/;"	f	class:CirGate
setCostVar	cirGate.h	/^    void setCostVar(Var v)                          { _costVar = v; }$/;"	f	class:CirGate
setFanin	cirGate.h	/^    void setFanin(CirGateV gateV, unsigned idx)     { assert(idx < _in.size()); _in[idx] = gateV; }$/;"	f	class:CirGate
setFaninSize	cirGate.h	/^    void setFaninSize(unsigned s)                   { _in.resize(s); }$/;"	f	class:CirGate
setFanout	cirGate.h	/^    void setFanout(CirGateV gateV, unsigned idx)    { assert(idx < _out.size()); _out[idx] = gateV; }$/;"	f	class:CirGate
setFanoutSize	cirGate.h	/^    void setFanoutSize(unsigned s)                  { _out.resize(s); }$/;"	f	class:CirGate
setId	cirGate.h	/^    void setId(unsigned i)          { _id = i; }$/;"	f	class:CirGate
setImpVar	cirGate.h	/^    void setImpVar(Var v)                           { _impVar = v; }$/;"	f	class:CirGate
setInv	cirGate.h	/^    void setInv()               { _gateV |= (size_t)INV_MASK; }$/;"	f	class:CirGateV
setName	cirMgr.h	/^    void setName(const string& n ) 	{ _name = n; }$/;"	f	class:CirMgr
setName	cirNet.h	/^	void setName(const string& n )					{ _name = n; }$/;"	f	class:CirNet
setRMVar	cirGate.h	/^    void setRMVar(Var v)                            { _rmVar = v; }$/;"	f	class:CirGate
setSimV	cirGate.h	/^    void setSimV(size_t s) { _simV = s; }$/;"	f	class:CirGate
setToRef	cirGate.h	/^    void setToRef()                 { _ref = _globalRef; }$/;"	f	class:CirGate
setUpCandSolver	cirSat.cpp	/^CirMgr::setUpCandSolver()$/;"	f	class:CirMgr
setUpImpVar	cirSat.cpp	/^CirMgr::setUpImpVar()$/;"	f	class:CirMgr
setVar	cirGate.h	/^    void setVar(Var v)                              { _var = v; }$/;"	f	class:CirGate
setWeight	cirGate.h	/^    void setWeight(unsigned w)  { _weight = w; }$/;"	f	class:CirGate
simulate	cirGate.cpp	/^CirAndGate::simulate() {$/;"	f	class:CirAndGate
simulate	cirGate.cpp	/^CirBufGate::simulate() {$/;"	f	class:CirBufGate
simulate	cirGate.cpp	/^CirConstGate::simulate() {$/;"	f	class:CirConstGate
simulate	cirGate.cpp	/^CirErrorGate::simulate() {$/;"	f	class:CirErrorGate
simulate	cirGate.cpp	/^CirInvGate::simulate() {$/;"	f	class:CirInvGate
simulate	cirGate.cpp	/^CirMuxGate::simulate() {$/;"	f	class:CirMuxGate
simulate	cirGate.cpp	/^CirNandGate::simulate() {$/;"	f	class:CirNandGate
simulate	cirGate.cpp	/^CirNorGate::simulate() {$/;"	f	class:CirNorGate
simulate	cirGate.cpp	/^CirOrGate::simulate() {$/;"	f	class:CirOrGate
simulate	cirGate.cpp	/^CirPiGate::simulate() {$/;"	f	class:CirPiGate
simulate	cirGate.cpp	/^CirPoGate::simulate() {$/;"	f	class:CirPoGate
simulate	cirGate.cpp	/^CirXnorGate::simulate() {$/;"	f	class:CirXnorGate
simulate	cirGate.cpp	/^CirXorGate::simulate() {$/;"	f	class:CirXorGate
size	reader.h	/^	unsigned int 	size;$/;"	m	class:Reader
solve	cirMgr.h	/^    bool solve() { return _s -> solve(); }$/;"	f	class:CirMgr
sortCandidate	cirCost.cpp	/^CirMgr::sortCandidate()$/;"	f	class:CirMgr
sortGateByWeight	cirCost.cpp	/^bool sortGateByWeight(CirGate* a, CirGate* b)$/;"	f
sweep	cirNet.cpp	/^CirNet::sweep()$/;"	f	class:CirNet
test	cirMgr.cpp	/^CirMgr::test()$/;"	f	class:CirMgr
testRM	cirMgr.cpp	/^CirMgr::testRM()$/;"	f	class:CirMgr
tieConst	cirSat.cpp	/^CirMgr::tieConst(CirNet* f, CirNet* g)$/;"	f	class:CirMgr
tieGate	cirSat.cpp	/^CirMgr::tieGate(CirGate* g1, CirGate* g2)$/;"	f	class:CirMgr
tieGateWithAssignment	cirCost.cpp	/^CirMgr::tieGateWithAssignment(const std::vector<bool>& assign)$/;"	f	class:CirMgr
tiePi	cirSat.cpp	/^CirMgr::tiePi(CirNet* f, CirNet* g, int solver)$/;"	f	class:CirMgr
totGateList	cirNet.cpp	/^CirNet::totGateList() const$/;"	f	class:CirNet
updateIndices	cirCost.cpp	/^CirMgr::updateIndices(std::vector<unsigned>& indices, unsigned& currCost)$/;"	f	class:CirMgr
varI1G	cirProof.cpp	/^VarMap varI1G;$/;"	v
varI2F	cirProof.cpp	/^VarMap varI2F;$/;"	v
varI2G	cirProof.cpp	/^VarMap varI2G;$/;"	v
writeToOut	cirMgr.cpp	/^CirMgr::writeToOut(const string& fileName, const string& inpuFile)$/;"	f	class:CirMgr
writeToPatch	cirMgr.cpp	/^CirMgr::writeToPatch(const string& fileName)$/;"	f	class:CirMgr
~CirGate	cirGate.h	/^    virtual ~CirGate() {}$/;"	f	class:CirGate
~CirGateV	cirGate.h	/^    ~CirGateV() {}$/;"	f	class:CirGateV
~CirMgr	cirMgr.h	/^    ~CirMgr() {}\/\/{ delete _F; delete _G; delete _patch; }$/;"	f	class:CirMgr
~CirNet	cirNet.cpp	/^CirNet::~CirNet()$/;"	f	class:CirNet
~Reader	reader.cpp	/^Reader::~Reader(){$/;"	f	class:Reader
